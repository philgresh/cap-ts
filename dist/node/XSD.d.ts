import * as asn1 from "asn1-ts";
import * as __utils from "./__utils";
export declare type XMLCompatibleString = asn1.UTF8String;
export declare function _decode_XMLCompatibleString(el: asn1.ASN1Element): string;
export declare function _encode_XMLCompatibleString(value: XMLCompatibleString, elGetter: __utils.ASN1Encoder<XMLCompatibleString>): asn1.ASN1Element;
export declare type AnySimpleType = XMLCompatibleString;
export declare function _decode_AnySimpleType(el: asn1.ASN1Element): string;
export declare function _encode_AnySimpleType(value: AnySimpleType, elGetter: __utils.ASN1Encoder<AnySimpleType>): asn1.ASN1Element;
export declare type String = XMLCompatibleString;
export declare function _decode_String(el: asn1.ASN1Element): string;
export declare function _encode_String(value: String, elGetter: __utils.ASN1Encoder<String>): asn1.ASN1Element;
export declare class AnyType {
    readonly embed_values: String[];
    readonly attr: String[];
    readonly elem_list: String[];
    constructor(embed_values: String[], attr: String[], elem_list: String[]);
}
export declare const _root_component_type_list_1_spec_for_AnyType: __utils.ComponentSpec[];
export declare const _root_component_type_list_2_spec_for_AnyType: __utils.ComponentSpec[];
export declare const _extension_additions_list_spec_for_AnyType: __utils.ComponentSpec[];
export declare function _decode_AnyType(el: asn1.ASN1Element): AnyType;
export declare function _encode_AnyType(value: AnyType, elGetter: __utils.ASN1Encoder<AnyType>): asn1.ASN1Element;
export declare class AnyType_nillable_content {
    readonly elem_list: String[];
    constructor(elem_list: String[]);
}
export declare const _root_component_type_list_1_spec_for_AnyType_nillable_content: __utils.ComponentSpec[];
export declare const _root_component_type_list_2_spec_for_AnyType_nillable_content: __utils.ComponentSpec[];
export declare const _extension_additions_list_spec_for_AnyType_nillable_content: __utils.ComponentSpec[];
export declare function _decode_AnyType_nillable_content(el: asn1.ASN1Element): AnyType_nillable_content;
export declare function _encode_AnyType_nillable_content(value: AnyType_nillable_content, elGetter: __utils.ASN1Encoder<AnyType_nillable_content>): asn1.ASN1Element;
export declare class AnyType_nillable {
    readonly embed_values: String[];
    readonly attr: String[];
    readonly content: asn1.OPTIONAL<AnyType_nillable_content>;
    constructor(embed_values: String[], attr: String[], content: asn1.OPTIONAL<AnyType_nillable_content>);
}
export declare const _root_component_type_list_1_spec_for_AnyType_nillable: __utils.ComponentSpec[];
export declare const _root_component_type_list_2_spec_for_AnyType_nillable: __utils.ComponentSpec[];
export declare const _extension_additions_list_spec_for_AnyType_nillable: __utils.ComponentSpec[];
export declare function _decode_AnyType_nillable(el: asn1.ASN1Element): AnyType_nillable;
export declare function _encode_AnyType_nillable(value: AnyType_nillable, elGetter: __utils.ASN1Encoder<AnyType_nillable>): asn1.ASN1Element;
export declare type GenericTimeTypeChoice<BasicType, Alternative> = {
    asn1supportedvalue: BasicType;
} | {
    othervalues: Alternative;
};
export declare function _get_decoder_for_GenericTimeTypeChoice<BasicType, Alternative>(_decode_BasicType: __utils.ASN1Decoder<BasicType>, _decode_Alternative: __utils.ASN1Decoder<Alternative>): __utils.ASN1Decoder<GenericTimeTypeChoice<BasicType, Alternative>>;
export declare function _get_encoder_for_GenericTimeTypeChoice<BasicType, Alternative>(_encode_BasicType: __utils.ASN1Encoder<BasicType>, _encode_Alternative: __utils.ASN1Encoder<Alternative>): __utils.ASN1Encoder<GenericTimeTypeChoice<BasicType, Alternative>>;
export declare type Date = GenericTimeTypeChoice<asn1.TIME, asn1.VisibleString>;
export declare function _decode_Date(el: asn1.ASN1Element): Date;
export declare function _encode_Date(value: Date, elGetter: __utils.ASN1Encoder<Date>): asn1.ASN1Element;
export declare type DateTime = asn1.TIME;
export declare function _decode_DateTime(el: asn1.ASN1Element): string;
export declare function _encode_DateTime(value: DateTime, elGetter: __utils.ASN1Encoder<DateTime>): asn1.ASN1Element;
export declare type Decimal = asn1.REAL;
export declare function _decode_Decimal(el: asn1.ASN1Element): number;
export declare function _encode_Decimal(value: Decimal, elGetter: __utils.ASN1Encoder<Decimal>): asn1.ASN1Element;
export declare type Double = asn1.REAL;
export declare function _decode_Double(el: asn1.ASN1Element): number;
export declare function _encode_Double(value: Double, elGetter: __utils.ASN1Encoder<Double>): asn1.ASN1Element;
export declare type Duration = GenericTimeTypeChoice<asn1.DURATION, asn1.VisibleString>;
export declare function _decode_Duration(el: asn1.ASN1Element): Duration;
export declare function _encode_Duration(value: Duration, elGetter: __utils.ASN1Encoder<Duration>): asn1.ASN1Element;
export declare type NormalizedString = String;
export declare function _decode_NormalizedString(el: asn1.ASN1Element): string;
export declare function _encode_NormalizedString(value: NormalizedString, elGetter: __utils.ASN1Encoder<NormalizedString>): asn1.ASN1Element;
export declare type Token = NormalizedString;
export declare function _decode_Token(el: asn1.ASN1Element): string;
export declare function _encode_Token(value: Token, elGetter: __utils.ASN1Encoder<Token>): asn1.ASN1Element;
export declare type Name = Token;
export declare function _decode_Name(el: asn1.ASN1Element): string;
export declare function _encode_Name(value: Name, elGetter: __utils.ASN1Encoder<Name>): asn1.ASN1Element;
export declare type NCName = Name;
export declare function _decode_NCName(el: asn1.ASN1Element): string;
export declare function _encode_NCName(value: NCName, elGetter: __utils.ASN1Encoder<NCName>): asn1.ASN1Element;
export declare type ENTITY = NCName;
export declare function _decode_ENTITY(el: asn1.ASN1Element): string;
export declare function _encode_ENTITY(value: ENTITY, elGetter: __utils.ASN1Encoder<ENTITY>): asn1.ASN1Element;
export declare type ENTITIES = ENTITY[];
export declare function _decode_ENTITIES(el: asn1.ASN1Element): ENTITIES;
export declare function _encode_ENTITIES(value: ENTITIES, elGetter: __utils.ASN1Encoder<ENTITIES>): asn1.ASN1Element;
export declare type Float = asn1.REAL;
export declare function _decode_Float(el: asn1.ASN1Element): number;
export declare function _encode_Float(value: Float, elGetter: __utils.ASN1Encoder<Float>): asn1.ASN1Element;
export declare type DateTimeType = asn1.VisibleString;
export declare function _decode_DateTimeType(el: asn1.ASN1Element): string;
export declare function _encode_DateTimeType(value: DateTimeType, elGetter: __utils.ASN1Encoder<DateTimeType>): asn1.ASN1Element;
export declare type GDay = DateTimeType;
export declare function _decode_GDay(el: asn1.ASN1Element): string;
export declare function _encode_GDay(value: GDay, elGetter: __utils.ASN1Encoder<GDay>): asn1.ASN1Element;
export declare type GMonth = DateTimeType;
export declare function _decode_GMonth(el: asn1.ASN1Element): string;
export declare function _encode_GMonth(value: GMonth, elGetter: __utils.ASN1Encoder<GMonth>): asn1.ASN1Element;
export declare type GMonthDay = DateTimeType;
export declare function _decode_GMonthDay(el: asn1.ASN1Element): string;
export declare function _encode_GMonthDay(value: GMonthDay, elGetter: __utils.ASN1Encoder<GMonthDay>): asn1.ASN1Element;
export declare type GYear = GenericTimeTypeChoice<asn1.TIME, asn1.VisibleString>;
export declare function _decode_GYear(el: asn1.ASN1Element): GYear;
export declare function _encode_GYear(value: GYear, elGetter: __utils.ASN1Encoder<GYear>): asn1.ASN1Element;
export declare type GYearMonth = GenericTimeTypeChoice<asn1.TIME, asn1.VisibleString>;
export declare function _decode_GYearMonth(el: asn1.ASN1Element): GYearMonth;
export declare function _encode_GYearMonth(value: GYearMonth, elGetter: __utils.ASN1Encoder<GYearMonth>): asn1.ASN1Element;
export declare type ID = NCName;
export declare function _decode_ID(el: asn1.ASN1Element): string;
export declare function _encode_ID(value: ID, elGetter: __utils.ASN1Encoder<ID>): asn1.ASN1Element;
export declare type IDREF = NCName;
export declare function _decode_IDREF(el: asn1.ASN1Element): string;
export declare function _encode_IDREF(value: IDREF, elGetter: __utils.ASN1Encoder<IDREF>): asn1.ASN1Element;
export declare type IDREFS = IDREF[];
export declare function _decode_IDREFS(el: asn1.ASN1Element): IDREFS;
export declare function _encode_IDREFS(value: IDREFS, elGetter: __utils.ASN1Encoder<IDREFS>): asn1.ASN1Element;
export declare type Int = asn1.INTEGER;
export declare function _decode_Int(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_Int(value: Int, elGetter: __utils.ASN1Encoder<Int>): asn1.ASN1Element;
export declare type Language = asn1.VisibleString;
export declare function _decode_Language(el: asn1.ASN1Element): string;
export declare function _encode_Language(value: Language, elGetter: __utils.ASN1Encoder<Language>): asn1.ASN1Element;
export declare type Long = asn1.INTEGER;
export declare function _decode_Long(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_Long(value: Long, elGetter: __utils.ASN1Encoder<Long>): asn1.ASN1Element;
export declare type NMTOKEN = Token;
export declare function _decode_NMTOKEN(el: asn1.ASN1Element): string;
export declare function _encode_NMTOKEN(value: NMTOKEN, elGetter: __utils.ASN1Encoder<NMTOKEN>): asn1.ASN1Element;
export declare type NMTOKENS = NMTOKEN[];
export declare function _decode_NMTOKENS(el: asn1.ASN1Element): NMTOKENS;
export declare function _encode_NMTOKENS(value: NMTOKENS, elGetter: __utils.ASN1Encoder<NMTOKENS>): asn1.ASN1Element;
export declare type XMLStringWithNoCRLFHT = asn1.UTF8String;
export declare function _decode_XMLStringWithNoCRLFHT(el: asn1.ASN1Element): string;
export declare function _encode_XMLStringWithNoCRLFHT(value: XMLStringWithNoCRLFHT, elGetter: __utils.ASN1Encoder<XMLStringWithNoCRLFHT>): asn1.ASN1Element;
export declare type AnyURI = XMLStringWithNoCRLFHT;
export declare function _decode_AnyURI(el: asn1.ASN1Element): string;
export declare function _encode_AnyURI(value: AnyURI, elGetter: __utils.ASN1Encoder<AnyURI>): asn1.ASN1Element;
export declare class QName {
    readonly uri: asn1.OPTIONAL<AnyURI>;
    readonly name: NCName;
    constructor(uri: asn1.OPTIONAL<AnyURI>, name: NCName);
}
export declare const _root_component_type_list_1_spec_for_QName: __utils.ComponentSpec[];
export declare const _root_component_type_list_2_spec_for_QName: __utils.ComponentSpec[];
export declare const _extension_additions_list_spec_for_QName: __utils.ComponentSpec[];
export declare function _decode_QName(el: asn1.ASN1Element): QName;
export declare function _encode_QName(value: QName, elGetter: __utils.ASN1Encoder<QName>): asn1.ASN1Element;
export declare type NOTATION = QName;
export declare function _decode_NOTATION(el: asn1.ASN1Element): QName;
export declare function _encode_NOTATION(value: NOTATION, elGetter: __utils.ASN1Encoder<NOTATION>): asn1.ASN1Element;
export declare type Short = asn1.INTEGER;
export declare function _decode_Short(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_Short(value: Short, elGetter: __utils.ASN1Encoder<Short>): asn1.ASN1Element;
export declare type Time = asn1.TIME;
export declare function _decode_Time(el: asn1.ASN1Element): string;
export declare function _encode_Time(value: Time, elGetter: __utils.ASN1Encoder<Time>): asn1.ASN1Element;
export declare type UnsignedInt = asn1.INTEGER;
export declare function _decode_UnsignedInt(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_UnsignedInt(value: UnsignedInt, elGetter: __utils.ASN1Encoder<UnsignedInt>): asn1.ASN1Element;
export declare type UnsignedLong = asn1.INTEGER;
export declare function _decode_UnsignedLong(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_UnsignedLong(value: UnsignedLong, elGetter: __utils.ASN1Encoder<UnsignedLong>): asn1.ASN1Element;
export declare type UnsignedShort = asn1.INTEGER;
export declare function _decode_UnsignedShort(el: asn1.ASN1Element): asn1.INTEGER;
export declare function _encode_UnsignedShort(value: UnsignedShort, elGetter: __utils.ASN1Encoder<UnsignedShort>): asn1.ASN1Element;
export declare type XMLStringWithNoWhitespace = asn1.UTF8String;
export declare function _decode_XMLStringWithNoWhitespace(el: asn1.ASN1Element): string;
export declare function _encode_XMLStringWithNoWhitespace(value: XMLStringWithNoWhitespace, elGetter: __utils.ASN1Encoder<XMLStringWithNoWhitespace>): asn1.ASN1Element;
export declare type Day = DateTimeType;
export declare function _decode_Day(el: asn1.ASN1Element): string;
export declare function _encode_Day(value: Day, elGetter: __utils.ASN1Encoder<Day>): asn1.ASN1Element;
export declare type Month = DateTimeType;
export declare function _decode_Month(el: asn1.ASN1Element): string;
export declare function _encode_Month(value: Month, elGetter: __utils.ASN1Encoder<Month>): asn1.ASN1Element;
export declare type MonthDay = DateTimeType;
export declare function _decode_MonthDay(el: asn1.ASN1Element): string;
export declare function _encode_MonthDay(value: MonthDay, elGetter: __utils.ASN1Encoder<MonthDay>): asn1.ASN1Element;
//# sourceMappingURL=XSD.d.ts.map